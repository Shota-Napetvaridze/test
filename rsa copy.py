import random



phi = 993253492452935121820315551609765547764200861236644604583769554519726980416875460767368123292287922962572189241399835015871307677778265230304910045248795509111404549636199112256842511138561622682015749187350169624186523401586430156743164203885891525793731042527791939044610331420697030806473541320223162575775303314030208417412612772333971494819331781399909314989454116429908113359538765783131158699319707223700204738026561514315471951069465672751672455341635648727309156975710681696921715812272941983867426997455120014602565187487996972035973903471661547180840129878522525888846035122843354443518361900343650364987545952240408581758884282402051867339216510204782411322399260199516711542261952864990534749296719079358889151418258415741617748714368200336710179247443071037238094734117053858745625595384293117166545638686057037229368009684060099881100998199585013178227029322448320601974936792859071390741387366832801935622386154615337060460189394532042064607878692341953275741120164111930163528692319027308042336337692855302077591598258295223262775483934946082133975326883045654227615075528510945777138609060408828022911601951509114671204260448335414863097970693586347002867426819868182182675923562719790549948808794897952626370424209062202291049793118912374317771794893674943763244662604482045859692450066482941056573426697120348020795851574377132429005774350666555250865168997964197539142488917414652158217610822215934787147018965090137915154073654407691790047681987139117765062477847088578510755690997510125885673195950694823565790355898766233079337981357754611706155494689279862485237989643116023983024613805726153070652221210009673960261394899896794725955242410172043968680423494793776224001523792498940881778607280055145064531969655583572219214744044047426753849090984822197763226843693202192573282850719500397664541655424919901326592284390410619348569107697058424672685063847772105198511013974104410475453641871867635590769818985693882047051021825977733226121929696648084805517080981753540916850824021980859615104911267710199238073017146278215711259565160573139182986357872993983249177848529401661218609958475505288816235837327104321997353821116303157069740820279123985700499625985960896508732637925957654229630752760709293006004519218074379807448590851834358934945489954725540106075815467434738787618737801856687071258514137364598701929582525251268952090656247952880270680763763098339799332569098380139768393533019619683395959008324558690944721418729403736831
e = 513444152893947538257639083362232832711946193972876510165914946190193111082793796409673752070178764743612627932547809774349272824918321328883447120427850333920931040130513235126286209353903870158896929959505037589567493320368308879600175545004525682346869336229534962507795499609058313077500577098007283980356324633006839477445237298140715187138310912158808199884704548752114372067079765726583184753895472954757900320947547064399573592960531577219032704250520478490343501933981615244392390112793377445275609732733481174301970728871844230752796309525795885380215614633361408808001724762020191439484245907478540904504233679620749524808279711200617373790278096716209612864192125994676524150649376089444743721620880480206702524066472578339437777235174479200595773407504556147908093618993534473916154524131354066606983645124536652265343182624096110766660202979266910932623402713783331340771101065029481389641382722032917483927403435847047986961572821124340945758606187614927227122236568464077999100536226948864858196840036526553908092891873399929589376553584444158309669648625020530690451459568802012602388637468356219444609828163321775785882446997509301831518634144438807273695529064938827472154895626769675041054628852501831943311500884521882819266597463969174095437555630919488481232400635401645142482232119171262623492875382375656259427573875107104521301160071170740238938230740223588197264677292948558852868316102594600542865581808707391306716018885372794027225095994170060145509242034533192207351238424541671828860977673215744101759542535406610850282519568407297444923258272488146328929418879228282890605730490831090031732056314233061711547592480265980351833950076990357835254366807414930359030651079528996910615983746352087955728350082413897906461535848939407396641951127697698804433510822599420181078941806424851806564665325148125302484725744723825434743702525789857256500917434765913020583546600950904720272546233388838538829662747380727445353616678852042553587013807334365911499457622468790350299976092238594448926565629583710710623807028485516550898690881898322315172956090488365006159461568252572009667287634801036593927216420380052264014356875426286755386282693090846316946293833568003369319965154091316439775472808857109580213069376796547174896372952328925088629287221996203559736955843560051061039980649157763785483952999120685779622051892460390079873968467558487284100067693950323071984719630581375716355548593821851940235195450838679532938248351347966703
flag = 692338661933216402692807477218199339646036977966184537300163633622728204400293862957974312890625908981984017137759038151808731872969978073576286125089335458306086649588289730575357702445068609971122667086922631371150332353967316412558860086268787151321666670507301126729224209876304744415516451660218037164561327929198246097379456240710956065514396194770573358772113291976799216825177240775093404894585437722830164808220897692768846781200872311676587727879325514856155116664044650036276837496886708944398640363284127936239060642669136715625896661175210783216536543374329404515439100690907845685183869468680777065326749023947277886152847214531546913799054624450218575652824283591778126113798220356220964566885039850270993873540676649607201507924986178184644704447681565947926675470447694818292287045187088320567775091661224886464585523170108382938797385827596388021805890831579853994786240143937679429682191384568246439996840469650772764449270084674953996592747382731741256828636967046679968089576555622135627918370289286305802070566568173989433017024451708584910586522152481889095733941744984849005243509523266418087447548175132997857822010476225241617409457383524325658357645263833079392906452452165514200611368765293817414494509187907354032484068083683513063245113560424833987660158723243626035101383982932548680014835137697082310299396947428684108273235305137080434020511794451380087647760899183743908301312849860636262524930976473419258743634448261095908985523203755078960697830013788066458332554449309066889237567359656911130561104038256529539576721823688627843972955838896196287285376164930994298518548016550491079788919449986644623339002073666735617121850765117794048869108521625716802414982148699355059268437824224566542922233677135274610007347829671774870753157219921376953346988932013697964673401651267809666498296178214000370800630453233503066617975623478262219880841663480393511598478784483044793470602919380015386217625170992980537274546249176411054048251028000137704826506004795683735358413779733500767816664594460846331678602552430663116993267159629233883817198783436631986048096622921684137229343294438044890328756142278070630641949201748781061586955656922781670507477303076246246046416414651792326809857350257354961475652003363222252281667737897816547425539622013459882248094894711548839741127296954921204915416734381856711587785423357621340062100013873716767701391721851033888512731293654853910318222043080644079912085294764011151434507067559248398

'''
Euclid's algorithm for determining the greatest common divisor
Use iteration to make it faster for larger integers
'''


def gcd(a, b):
    while b != 0:
        a, b = b, a % b
    return a


'''
Euclid's extended algorithm for finding the multiplicative inverse of two numbers
'''




def multiplicative_inverse(e, phi):
    d = 0
    x1 = 0
    x2 = 1
    y1 = 1
    temp_phi = phi

    while e > 0:
        temp1 = temp_phi//e
        temp2 = temp_phi - temp1 * e
        temp_phi = e
        e = temp2

        x = x2 - temp1 * x1
        y = d - temp1 * y1

        x2 = x1
        x1 = x
        d = y1
        y1 = y

    if temp_phi == 1:
        return d + phi



'''
Tests to see if a number is prime.
'''


def is_prime(num):
    if num == 2:
        return True
    if num < 2 or num % 2 == 0:
        return False
    for n in range(3, int(num**0.5)+2, 2):
        if num % n == 0:
            return False
    return True


def generate_key_pair(p, q):
    if not (is_prime(p) and is_prime(q)):
        raise ValueError('Both numbers must be prime.')
    elif p == q:
        raise ValueError('p and q cannot be equal')
    # n = pq
    n = p * q

    # Phi is the totient of n
    phi = (p-1) * (q-1)

    # Choose an integer e such that e and phi(n) are coprime
    e = random.randrange(1, phi)

    # Use Euclid's Algorithm to verify that e and phi(n) are coprime
    g = gcd(e, phi)
    while g != 1:
        e = random.randrange(1, phi)
        g = gcd(e, phi)

    # Use Extended Euclid's Algorithm to generate the private key
    d = multiplicative_inverse(e, phi)

    # Return public and private key_pair
    # Public key is (e, n) and private key is (d, n)
    return ((e, n), (d, n))


def encrypt(pk, plaintext):
    # Unpack the key into it's components
    key, n = pk
    # Convert each letter in the plaintext to numbers based on the character using a^b mod m
    cipher = [pow(ord(char), key, n) for char in plaintext]
    # Return the array of bytes
    return cipher


def decrypt(pk, ciphertext):
    # Unpack the key into its components
    key, n = pk
    # Generate the plaintext based on the ciphertext and key using a^b mod m
    aux = [str(pow(char, key, n)) for char in ciphertext]
    # Return the array of bytes as a string
    plain = [chr(int(char2)) for char2 in aux]
    return ''.join(plain)


if __name__ == '__main__':
    '''
    Detect if the script is being run directly by the user
    '''
    print("===========================================================================================================")
    print("================================== RSA Encryptor / Decrypter ==============================================")
    print(" ")

    #p = int(input(" - Enter a prime number (17, 19, 23, etc): "))
    # q = int(input(" - Enter another prime number (Not one you entered above): "))

    #print(" - Generating your public / private key-pairs now . . .")

    #public, private = generate_key_pair(p, q)

    #print(" - Your public key is ", public, " and your private key is ", private)

    #message = input(" - Enter a message to encrypt with your public key: ")
    #encrypted_msg = encrypt(public, message)

    #print(" - Your encrypted message is: ", ''.join(map(lambda x: str(x), encrypted_msg)))
    #print(" - Decrypting message with private key ", private, " . . .")
    #print(" - Your message is: ", decrypt(private, encrypted_msg))
    d = multiplicative_inverse(e, phi)
    print(d)
    
    plaintext = (pow(flag, d))%
    #print(" ")
    #print("============================================ END ==========================================================")
    #print("===========================================================================================================")
